plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// Read signing properties for release builds
def keyProperties = new Properties()
def keyPropertiesFile = rootProject.file('android/key.properties')
if (keyPropertiesFile.exists()) {
    keyProperties.load(new FileInputStream(keyPropertiesFile))
}

flutter {
    source "../../"
}

android {
    namespace = "com.binah.cryptingtool"
    compileSdk = 35
    ndkVersion = "26.1.10909125"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    
    kotlinOptions {
        jvmTarget = '17'
    }

    signingConfigs {
        debug {
            // Default debug config
        }
        release {
            if (keyPropertiesFile.exists()) {
                storeFile file(keyProperties['storeFile'])
                storePassword keyProperties['storePassword']
                keyAlias keyProperties['keyAlias']
                keyPassword keyProperties['keyPassword']
            }
        }
    }

    defaultConfig {
        applicationId = "com.binah.cryptingtool"
        minSdk = 24
        targetSdk = 35
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
        
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
        }
    }

    buildTypes {
        release {
            // Enables code shrinking, obfuscation, and optimization for your release build.
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // Use the release signing configuration.
            signingConfig signingConfigs.release
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
}
