plugins {
    id "com.android.application"
    id "org.jetbrains.kotlin.android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace = "com.binah.cryptingtool"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    defaultConfig {
        applicationId = "com.binah.cryptingtool"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutterVersionCode.toInteger()
        versionName = flutterVersionName
        
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
        }
    }

    // External native build configuration for C++ integration using NDK build system
    externalNativeBuild {
        ndkBuild {
            path "src/main/jni/Android.mk"
        }
    }

    buildTypes {
        release {
            // Enable code shrinking, obfuscation, and optimization
            minifyEnabled = true
            shrinkResources = true
            proguardFiles = [
                getDefaultProguardFile('proguard-android-optimize.txt'),
                'proguard-rules.pro'
            ]
            signingConfig = signingConfigs.debug
            
            // Performance optimizations
            ndk {
                debugSymbolLevel = 'NONE'
            }
            
            // External native build arguments for release
            externalNativeBuild {
                ndkBuild {
                    arguments "APP_OPTIM=release", 
                             "APP_ABI=arm64-v8a,armeabi-v7a,x86_64",
                             "APP_STL=c++_shared",
                             "APP_PLATFORM=android-24"
                    abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
                    targets "cryptingtool"
                }
            }
        }
        
        debug {
            // Disable optimizations for debug builds
            minifyEnabled = false
            shrinkResources = false
            debuggable = true
            
            // External native build arguments for debug
            externalNativeBuild {
                ndkBuild {
                    arguments "APP_OPTIM=debug", 
                             "APP_ABI=arm64-v8a,armeabi-v7a,x86_64",
                             "APP_STL=c++_shared",
                             "APP_PLATFORM=android-24"
                    abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86_64'
                    targets "cryptingtool"
                }
            }
        }
    }
    
    // Support for modern Android versions and native library optimization
    packagingOptions {
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libjsc.so'
        pickFirst '**/libcryptopp.so'  // Include our Crypto++ library
        pickFirst '**/libcryptingtool.so'  // Include our native library
        
        // Exclude unnecessary files to reduce APK size
        excludes += [
            'META-INF/DEPENDENCIES',
            'META-INF/LICENSE',
            'META-INF/LICENSE.txt',
            'META-INF/license.txt',
            'META-INF/NOTICE',
            'META-INF/NOTICE.txt',
            'META-INF/notice.txt',
            'META-INF/ASL2.0',
            'META-INF/*.kotlin_module'
        ]
    }
    
    // Lint optimizations
    lintOptions {
        checkReleaseBuilds = false
        abortOnError = false
    }
}

flutter {
    source '../..'
}

dependencies {
    // Flutter and dependencies will be managed by the Flutter tool
}