name: Flutter Android Build

on:
  push:
    branches: [ "main" ] # main 브랜치에 push될 때 실행
  pull_request:
    branches: [ "main" ] # main 브랜치로 pull request가 올 때 실행

jobs:
  build:
    runs-on: ubuntu-latest # 빌드를 실행할 환경

    steps:
    # 1. 소스 코드 체크아웃
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. JDK(Java Development Kit) 설치 (Gradle 실행에 필요)
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17' # 프로젝트의 build.gradle과 호환되는 버전으로 설정

    # 3. Flutter SDK 설치 (가장 중요한 부분) - 최신 버전으로 업그레이드
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3' # filePermissions 이슈가 해결된 최신 버전
        channel: 'stable'

    # 4. Android SDK 설정 및 라이센스 동의
    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    # 5. Android SDK 라이센스 자동 동의
    - name: Accept Android SDK licenses
      run: yes | flutter doctor --android-licenses || echo "Some licenses may already be accepted"

    # 6. C++ 컴파일러 및 필수 라이브러리 설치 (C++ 통합을 위해)
    - name: Install C++ dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake ninja-build libcrypto++-dev

    # 7. Flutter 패키지 의존성 다운로드 - 캐시 클리어 포함
    - name: Clean and get Flutter packages
      run: |
        flutter clean
        flutter pub get

    # 8. Flutter 닥터 실행 (설정 확인)
    - name: Flutter doctor
      run: flutter doctor -v

    # 9. Gradle 캐시 클리어 및 Wrapper 생성
    - name: Clean Gradle cache and Generate Gradle Wrapper
      run: |
        # Gradle 캐시 클리어
        rm -rf ~/.gradle/caches/
        cd android
        # 기존 빌드 캐시 제거
        rm -rf build/ app/build/ .gradle/
        if [ ! -f "gradlew" ]; then
          echo "Gradle wrapper not found, generating..."
          gradle wrapper --gradle-version=8.4
        fi

    # 10. Flutter 빌드 명령어 실행 (APK 생성)
    # 이 명령어가 Dart 컴파일과 C++ NDK 빌드를 포함한 모든 것을 처리합니다.
    - name: Build APK
      run: flutter build apk --debug

    # 11. 빌드된 APK 파일을 Artifact로 업로드 (결과물 다운로드용)
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: build/app/outputs/flutter-apk/app-debug.apk

    # 12. 빌드 정보 요약 출력
    - name: Build summary
      run: |
        echo "✅ APK 빌드 완료!"
        echo "📱 앱 이름: CryptingTool"
        echo "🔧 빌드 타입: Debug"
        echo "📊 APK 위치: build/app/outputs/flutter-apk/app-debug.apk"
        if [ -f "build/app/outputs/flutter-apk/app-debug.apk" ]; then
          echo "📏 APK 크기: $(du -h build/app/outputs/flutter-apk/app-debug.apk | cut -f1)"
        fi