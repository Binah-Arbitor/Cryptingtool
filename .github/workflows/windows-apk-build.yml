---
name: Windows APK Build

on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'Application name for the APK'
        required: false
        default: 'CryptingTool'
        type: string
      enable_logging:
        description: 'Enable detailed logging and error tracking'
        required: false
        default: true
        type: boolean

jobs:
  build-debug-apk:
    runs-on: windows-latest
    name: Build Debug APK on Windows

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç System Information
        shell: pwsh
        run: |
          Write-Host "=== System Information ===" -ForegroundColor Green
          Write-Host "OS: $env:OS" -ForegroundColor Yellow
          Write-Host "Architecture: $env:PROCESSOR_ARCHITECTURE" -ForegroundColor Yellow
          Write-Host "Number of Processors: $env:NUMBER_OF_PROCESSORS" -ForegroundColor Yellow
          Write-Host "Available Memory: " -NoNewline -ForegroundColor Yellow
          Get-WmiObject -Class Win32_ComputerSystem | Select-Object -ExpandProperty TotalPhysicalMemory | ForEach-Object { "{0:N2} GB" -f ($_ / 1GB) }
          Write-Host "Disk Space: " -NoNewline -ForegroundColor Yellow
          Get-WmiObject -Class Win32_LogicalDisk -Filter "DeviceID='C:'" | Select-Object -ExpandProperty FreeSpace | ForEach-Object { "{0:N2} GB free" -f ($_ / 1GB) }
          Write-Host "==========================" -ForegroundColor Green

      - name: ‚òï Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: üîç Verify Java Installation
        shell: pwsh
        run: |
          Write-Host "=== Java Information ===" -ForegroundColor Green
          java -version
          javac -version
          Write-Host "JAVA_HOME: $env:JAVA_HOME" -ForegroundColor Yellow
          Write-Host "=========================" -ForegroundColor Green

      - name: üì± Set up Flutter SDK
        uses: subosito/flutter-action@v2.21.0
        with:
          channel: 'stable'
          cache: true
          cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:'
          cache-path: '${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:'

      - name: üîç Verify Flutter Installation
        shell: pwsh
        run: |
          Write-Host "=== Flutter Information ===" -ForegroundColor Green
          flutter --version
          flutter doctor -v
          Write-Host "Flutter SDK Path: " -NoNewline -ForegroundColor Yellow
          where.exe flutter
          Write-Host "============================" -ForegroundColor Green

      - name: üîç Comprehensive SDK Verification
        shell: pwsh
        run: |
          Write-Host "=== Running Comprehensive SDK Check ===" -ForegroundColor Green
          
          # Run SDK verification if available
          if (Test-Path "scripts/verify-sdk.sh") {
            Write-Host "Running SDK verification script..." -ForegroundColor Yellow
            bash scripts/verify-sdk.sh
          } else {
            Write-Host "SDK verification script not found, running basic checks..." -ForegroundColor Yellow
          }
          
          # Additional Windows-specific checks
          Write-Host "Windows-specific SDK checks:" -ForegroundColor Yellow
          
          # Check Android SDK environment
          if ($env:ANDROID_HOME) {
            Write-Host "‚úÖ ANDROID_HOME set to: $env:ANDROID_HOME" -ForegroundColor Green
            if (Test-Path $env:ANDROID_HOME) {
              Write-Host "‚úÖ Android SDK directory exists" -ForegroundColor Green
              
              # List SDK components
              if (Test-Path "$env:ANDROID_HOME\platforms") {
                $platforms = Get-ChildItem "$env:ANDROID_HOME\platforms" | Select-Object -ExpandProperty Name
                Write-Host "üì± Available platforms: $($platforms -join ', ')" -ForegroundColor Cyan
              }
              
              if (Test-Path "$env:ANDROID_HOME\build-tools") {
                $buildTools = Get-ChildItem "$env:ANDROID_HOME\build-tools" | Select-Object -ExpandProperty Name | Sort-Object
                $latestBuildTool = $buildTools | Select-Object -Last 1
                Write-Host "üîß Build tools: $($buildTools -join ', ') (latest: $latestBuildTool)" -ForegroundColor Cyan
              }
            } else {
              Write-Host "‚ùå Android SDK directory not found at: $env:ANDROID_HOME" -ForegroundColor Red
            }
          } elseif ($env:ANDROID_SDK_ROOT) {
            Write-Host "‚úÖ ANDROID_SDK_ROOT set to: $env:ANDROID_SDK_ROOT" -ForegroundColor Green
          } else {
            Write-Host "‚ö†Ô∏è Neither ANDROID_HOME nor ANDROID_SDK_ROOT is set" -ForegroundColor Yellow
          }
          
          # Check JAVA_HOME
          if ($env:JAVA_HOME) {
            Write-Host "‚úÖ JAVA_HOME set to: $env:JAVA_HOME" -ForegroundColor Green
            if (Test-Path $env:JAVA_HOME) {
              Write-Host "‚úÖ Java directory exists" -ForegroundColor Green
            } else {
              Write-Host "‚ùå Java directory not found at: $env:JAVA_HOME" -ForegroundColor Red
            }
          } else {
            Write-Host "‚ö†Ô∏è JAVA_HOME not set" -ForegroundColor Yellow
          }
          
          Write-Host "==========================================" -ForegroundColor Green

      - name: üì¶ Install Windows Dependencies
        shell: pwsh
        run: |
          Write-Host "=== Installing Dependencies ===" -ForegroundColor Green

          # Install Chocolatey if not present
          if (-not (Get-Command choco -ErrorAction SilentlyContinue)) {
            Write-Host "Installing Chocolatey..." -ForegroundColor Yellow
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))
          }

          Write-Host "Installing build tools..." -ForegroundColor Yellow
          try {
            choco install cmake --confirm
            choco install ninja --confirm
            Write-Host "‚úÖ Build tools installed successfully" -ForegroundColor Green
          }
          catch {
            Write-Host "‚ö†Ô∏è Warning: Could not install some build tools: $_" -ForegroundColor Yellow
          }

          Write-Host "===============================" -ForegroundColor Green

      - name: üèóÔ∏è Initialize Android Project Structure
        shell: pwsh
        run: |
          Write-Host "=== Initializing Android Project ===" -ForegroundColor Green

          # Check if android directory exists
          if (-not (Test-Path "android")) {
            Write-Host "Creating Android platform support..." -ForegroundColor Yellow
            flutter create --platforms android .
            Write-Host "‚úÖ Android platform initialized" -ForegroundColor Green
          } else {
            Write-Host "‚úÖ Android platform already exists" -ForegroundColor Green
          }
          
          # Verify Android configuration for API 35+ support
          Write-Host "Verifying Android API 35+ configuration..." -ForegroundColor Yellow
          
          if (Test-Path "android/app/build.gradle") {
            $buildGradle = Get-Content "android/app/build.gradle" -Raw
            if ($buildGradle -match "minSdk\s*=\s*16" -or $buildGradle -match "minSdkVersion\s+16") {
              Write-Host "‚úÖ Android build.gradle configured for API 16+ support" -ForegroundColor Green
            } else {
              Write-Host "‚ö†Ô∏è Updating build.gradle for API 16+ support..." -ForegroundColor Yellow
            }
            if ($buildGradle -match "targetSdk\s*=\s*35" -or $buildGradle -match "targetSdkVersion\s+35") {
              Write-Host "‚úÖ Android build.gradle configured for API 35 target" -ForegroundColor Green
            } else {
              Write-Host "‚ö†Ô∏è build.gradle should target API 35..." -ForegroundColor Yellow
            }
          }
          
          if (Test-Path "android/app/src/main/AndroidManifest.xml") {
            $manifest = Get-Content "android/app/src/main/AndroidManifest.xml" -Raw
            if ($manifest -match "minSdkVersion=.16." -or $manifest -match "android:minSdkVersion=.16.") {
              Write-Host "‚úÖ AndroidManifest.xml configured for API 16+ support" -ForegroundColor Green
            } else {
              Write-Host "‚ö†Ô∏è AndroidManifest.xml needs API 16+ configuration..." -ForegroundColor Yellow
            }
          }

          # List directory structure
          Write-Host "Project structure:" -ForegroundColor Yellow
          Get-ChildItem -Name | Sort-Object

          if (Test-Path "android") {
            Write-Host "Android directory contents:" -ForegroundColor Yellow
            Get-ChildItem android -Name | Sort-Object
            
            Write-Host "Android app directory contents:" -ForegroundColor Yellow  
            Get-ChildItem android/app -Name | Sort-Object
          }

          Write-Host "===================================" -ForegroundColor Green

      - name: üìã Package Dependency Management
        shell: pwsh
        run: |
          Write-Host "=== Managing Package Dependencies ===" -ForegroundColor Green

          # Clean any previous builds
          Write-Host "Cleaning previous builds..." -ForegroundColor Yellow
          flutter clean

          # Get Flutter dependencies
          Write-Host "Getting Flutter dependencies..." -ForegroundColor Yellow
          flutter pub get

          # Verify dependencies
          Write-Host "Verifying dependencies..." -ForegroundColor Yellow
          flutter pub deps

          # Check for any dependency conflicts
          Write-Host "Checking for dependency issues..." -ForegroundColor Yellow
          flutter pub deps --style=compact 2>&1 | Tee-Object -FilePath "dependency_check.log"

          if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Dependency issues detected" -ForegroundColor Red
            Get-Content "dependency_check.log"
            exit 1
          }

          Write-Host "‚úÖ All dependencies resolved successfully" -ForegroundColor Green
          Write-Host "====================================" -ForegroundColor Green

      - name: üîß Configure Android Build Environment
        shell: pwsh
        run: |
          Write-Host "=== Configuring Android Build ===" -ForegroundColor Green

          # Run flutter doctor to check Android setup
          Write-Host "Checking Android setup..." -ForegroundColor Yellow
          flutter doctor --android-licenses 2>&1 | Tee-Object -FilePath "android_setup.log"

          # Accept Android licenses automatically - Enhanced method to fix "1 of 7 SDK package license not accepted" issue
          Write-Host "Accepting Android licenses with enhanced method..." -ForegroundColor Yellow
          
          # Method 1: Enhanced PowerShell-native approach with better timeout handling
          $licenseAccepted = $false
          try {
            Write-Host "Attempting PowerShell-native license acceptance..." -ForegroundColor Yellow
            
            # Prepare multiple "y" responses with proper line endings
            $yesResponses = @()
            for ($i = 1; $i -le 10; $i++) {
              $yesResponses += "y"
            }
            $responseString = ($yesResponses -join "`r`n") + "`r`n"
            
            $psi = New-Object System.Diagnostics.ProcessStartInfo
            $psi.FileName = "flutter"
            $psi.Arguments = "doctor --android-licenses"
            $psi.RedirectStandardInput = $true
            $psi.RedirectStandardOutput = $true
            $psi.RedirectStandardError = $true
            $psi.UseShellExecute = $false
            $psi.WorkingDirectory = (Get-Location).Path
            
            $process = [System.Diagnostics.Process]::Start($psi)
            
            # Write responses in chunks to avoid buffer issues
            $process.StandardInput.Write($responseString)
            $process.StandardInput.Flush()
            $process.StandardInput.Close()
            
            # Wait with reasonable timeout (3 minutes)
            $timeoutMs = 180000
            if ($process.WaitForExit($timeoutMs)) {
              Write-Host "‚úÖ Android licenses accepted successfully (Exit code: $($process.ExitCode))" -ForegroundColor Green
              $licenseAccepted = $true
            } else {
              Write-Host "‚ö†Ô∏è License acceptance timed out after 3 minutes - killing process" -ForegroundColor Yellow
              $process.Kill()
              $process.WaitForExit(5000)  # Wait for cleanup
            }
          }
          catch {
            Write-Host "‚ö†Ô∏è PowerShell method failed: $($_.Exception.Message)" -ForegroundColor Yellow
          }

          # Method 2: Fallback using yes command simulation if Method 1 failed
          if (-not $licenseAccepted) {
            Write-Host "Trying fallback license acceptance method..." -ForegroundColor Yellow
            try {
              # Create a temporary script to handle license acceptance
              $tempScript = "license_accept.bat"
              @(
                "@echo off",
                "setlocal enabledelayedexpansion", 
                "echo y",
                "echo y",
                "echo y",
                "echo y", 
                "echo y",
                "echo y",
                "echo y",
                "echo y",
                "echo y",
                "echo y"
              ) | Out-File -FilePath $tempScript -Encoding ASCII

              # Execute with timeout using PowerShell job
              $job = Start-Job -ScriptBlock {
                param($script, $workingDir)
                Set-Location $workingDir
                & cmd.exe /c "$script | flutter doctor --android-licenses 2>&1"
              } -ArgumentList $tempScript, (Get-Location).Path

              # Wait for job completion with timeout
              $completed = Wait-Job $job -Timeout 180  # 3 minutes
              
              if ($completed) {
                $result = Receive-Job $job
                Write-Host "Fallback method result: $result" -ForegroundColor Yellow
                $licenseAccepted = $true
                Write-Host "‚úÖ Fallback license acceptance completed" -ForegroundColor Green
              } else {
                Stop-Job $job
                Write-Host "‚ö†Ô∏è Fallback method also timed out" -ForegroundColor Yellow
              }
              
              Remove-Job $job -Force
              Remove-Item $tempScript -ErrorAction SilentlyContinue
            }
            catch {
              Write-Host "‚ö†Ô∏è Fallback method failed: $($_.Exception.Message)" -ForegroundColor Yellow
            }
          }

          # Method 3: Direct SDK manager approach if both methods fail
          if (-not $licenseAccepted) {
            Write-Host "Trying direct SDK manager approach..." -ForegroundColor Yellow
            try {
              # Find Android SDK location
              $androidHome = $env:ANDROID_HOME
              if (-not $androidHome) {
                $androidHome = $env:ANDROID_SDK_ROOT
              }
              if (-not $androidHome) {
                # Try to find Flutter's Android SDK
                $flutterPath = (Get-Command flutter).Path
                $flutterDir = Split-Path (Split-Path $flutterPath)
                $androidHome = Join-Path $flutterDir "bin\cache\artifacts\engine\android-x64"
                if (-not (Test-Path $androidHome)) {
                  $androidHome = "${env:LOCALAPPDATA}\Android\Sdk"
                }
              }
              
              Write-Host "Using Android SDK at: $androidHome" -ForegroundColor Yellow
              
              if (Test-Path $androidHome) {
                $sdkManager = Join-Path $androidHome "cmdline-tools\latest\bin\sdkmanager.bat"
                if (-not (Test-Path $sdkManager)) {
                  $sdkManager = Join-Path $androidHome "tools\bin\sdkmanager.bat"
                }
                
                if (Test-Path $sdkManager) {
                  Write-Host "Found SDK manager at: $sdkManager" -ForegroundColor Yellow
                  
                  # Accept all licenses using SDK manager directly
                  $job = Start-Job -ScriptBlock {
                    param($sdkMgr)
                    & $sdkMgr --licenses --update
                  } -ArgumentList $sdkManager
                  
                  $completed = Wait-Job $job -Timeout 120  # 2 minutes
                  if ($completed) {
                    $result = Receive-Job $job
                    Write-Host "SDK manager result: $result" -ForegroundColor Yellow
                    Write-Host "‚úÖ SDK manager license acceptance completed" -ForegroundColor Green
                  } else {
                    Stop-Job $job
                    Write-Host "‚ö†Ô∏è SDK manager approach timed out" -ForegroundColor Yellow
                  }
                  Remove-Job $job -Force
                }
              }
            }
            catch {
              Write-Host "‚ö†Ô∏è SDK manager approach failed: $($_.Exception.Message)" -ForegroundColor Yellow
            }
          }

          # Final verification
          Write-Host "Performing final license verification..." -ForegroundColor Yellow
          flutter doctor -v 2>&1 | Tee-Object -FilePath "flutter_doctor.log"
          
          # Check for any remaining license issues
          $doctorOutput = Get-Content "flutter_doctor.log" -Raw
          if ($doctorOutput -match "licenses not accepted" -or $doctorOutput -match "license.*not.*accepted") {
            Write-Host "‚ö†Ô∏è Warning: Some licenses may still not be accepted - check build logs" -ForegroundColor Yellow
            Write-Host "Continuing build - SDK issues may be resolved during build process..." -ForegroundColor Yellow
          } else {
            Write-Host "‚úÖ All SDK licenses appear to be accepted" -ForegroundColor Green
          }
          
          # Validate Android API 16+ configuration
          Write-Host "Validating Android API 16+ target configuration..." -ForegroundColor Yellow
          
          if (Test-Path "android/app/build.gradle") {
            Write-Host "‚úÖ build.gradle found" -ForegroundColor Green
            $buildGradle = Get-Content "android/app/build.gradle" -Raw
            if ($buildGradle -match "minSdk\s*=\s*1[6-9]|[2-9][0-9]|[1-9][0-9][0-9]") {
              Write-Host "‚úÖ Minimum SDK version is 16 or higher" -ForegroundColor Green
            } else {
              Write-Host "‚ö†Ô∏è Warning: Minimum SDK version may not be properly configured for API 16+" -ForegroundColor Yellow
            }
            
            if ($buildGradle -match "compileSdk\s*=\s*3[4-9]|[4-9][0-9]") {
              Write-Host "‚úÖ Compile SDK version is current (34+)" -ForegroundColor Green
            } else {
              Write-Host "‚ö†Ô∏è Warning: Compile SDK version should be 34 or higher" -ForegroundColor Yellow
            }
          }
          
          if (Test-Path "android/app/src/main/AndroidManifest.xml") {
            Write-Host "‚úÖ AndroidManifest.xml found" -ForegroundColor Green
            $manifest = Get-Content "android/app/src/main/AndroidManifest.xml" -Raw
            if ($manifest -match "minSdkVersion=.1[6-9]|[2-9][0-9]|[1-9][0-9][0-9].") {
              Write-Host "‚úÖ AndroidManifest.xml minimum SDK is 16 or higher" -ForegroundColor Green
            }
            if ($manifest -match "targetSdkVersion=.3[5-9]|[4-9][0-9].") {
              Write-Host "‚úÖ AndroidManifest.xml target SDK is 35 or higher" -ForegroundColor Green
            }
          }

          Write-Host "‚úÖ Android environment configured for API 35 target with enhanced license acceptance" -ForegroundColor Green
          Write-Host "=================================" -ForegroundColor Green

      - name: üèóÔ∏è Build Debug APK
        shell: pwsh
        run: |
          Write-Host "=== Building Debug APK ===" -ForegroundColor Green

          $ErrorActionPreference = "Continue"
          $BuildLog = "apk_build.log"
          $BuildSuccess = $true

          Write-Host "Starting APK build process..." -ForegroundColor Yellow
          Write-Host "App Name: ${{ inputs.app_name }}" -ForegroundColor Yellow
          Write-Host "Build Mode: debug" -ForegroundColor Yellow
          Write-Host "Target Platform: Android API 35 (4.1+ compatible)" -ForegroundColor Yellow
          Write-Host "VM Environment: Windows" -ForegroundColor Yellow

          try {
            # Build debug APK with verbose output
            Write-Host "Executing flutter build apk --debug --verbose..." -ForegroundColor Yellow
            flutter build apk --debug --verbose 2>&1 | Tee-Object -FilePath $BuildLog

            if ($LASTEXITCODE -eq 0) {
              Write-Host "‚úÖ APK build completed successfully!" -ForegroundColor Green
            } else {
              Write-Host "‚ùå APK build failed with exit code: $LASTEXITCODE" -ForegroundColor Red
              $BuildSuccess = $false
            }
          }
          catch {
            Write-Host "‚ùå APK build failed with exception: $_" -ForegroundColor Red
            $BuildSuccess = $false
          }

          # Check if APK files were generated
          Write-Host "Checking for generated APK files..." -ForegroundColor Yellow
          $ApkFiles = @()

          if (Test-Path "build/app/outputs/flutter-apk") {
            $ApkFiles = Get-ChildItem -Path "build/app/outputs/flutter-apk" -Filter "*.apk" -Recurse
          }

          if ($ApkFiles.Count -gt 0) {
            Write-Host "‚úÖ Found $($ApkFiles.Count) APK file(s):" -ForegroundColor Green
            foreach ($apk in $ApkFiles) {
              $size = [math]::Round($apk.Length / 1MB, 2)
              Write-Host "  üì± $($apk.Name) - ${size} MB" -ForegroundColor Yellow
            }
          } else {
            Write-Host "‚ùå No APK files found in expected location" -ForegroundColor Red
            $BuildSuccess = $false
          }

          # Display build directory contents for debugging
          Write-Host "Build directory contents:" -ForegroundColor Yellow
          if (Test-Path "build") {
            Get-ChildItem -Path "build" -Recurse | Select-Object FullName, Length | Format-Table -AutoSize
          }

          if (-not $BuildSuccess) {
            Write-Host "‚ùå Build process failed - check logs for details" -ForegroundColor Red
            exit 1
          }

          Write-Host "==========================" -ForegroundColor Green

      - name: üìä Error Log Tracking and Analysis
        shell: pwsh
        if: always()
        run: |
          Write-Host "=== Error Log Analysis ===" -ForegroundColor Green

          # Collect all log files
          $LogFiles = @(
            "dependency_check.log",
            "android_setup.log",
            "flutter_doctor.log",
            "apk_build.log"
          )

          Write-Host "Analyzing log files for errors and warnings..." -ForegroundColor Yellow

          foreach ($logFile in $LogFiles) {
            if (Test-Path $logFile) {
              Write-Host "--- Analyzing $logFile ---" -ForegroundColor Cyan
              $content = Get-Content $logFile -Raw

              # Search for common error patterns
              $errors = Select-String -InputObject $content -Pattern "ERROR|FAILURE|Failed|Exception|Error:" -AllMatches
              $warnings = Select-String -InputObject $content -Pattern "WARNING|Warning|WARN:" -AllMatches

              if ($errors) {
                Write-Host "üî¥ Errors found in $logFile :" -ForegroundColor Red
                $errors.Matches | ForEach-Object { Write-Host "  $_" -ForegroundColor Red }
              }

              if ($warnings) {
                Write-Host "üü° Warnings found in $logFile :" -ForegroundColor Yellow
                $warnings.Matches | ForEach-Object { Write-Host "  $_" -ForegroundColor Yellow }
              }

              if (-not $errors -and -not $warnings) {
                Write-Host "‚úÖ No errors or warnings in $logFile" -ForegroundColor Green
              }
            } else {
              Write-Host "‚ö†Ô∏è Log file $logFile not found" -ForegroundColor Yellow
            }
          }

          # Create error summary
          Write-Host "Creating error summary..." -ForegroundColor Yellow
          $errorSummary = "Error Log Summary - $(Get-Date)"
          $errorSummary += "`n====================================="
          $errorSummary += "`n"
          $errorSummary += "`nBuild Status: $(if (Test-Path "build/app/outputs/flutter-apk/*.apk") { "SUCCESS" } else { "FAILED" })"
          $errorSummary += "`nApp Name: ${{ inputs.app_name }}"
          $errorSummary += "`nBuild Mode: debug"
          $errorSummary += "`nPlatform: Android (Windows Runner)"
          $errorSummary += "`n"
          $errorSummary += "`nLog Files Generated:"
          $errorSummary += "`n$($LogFiles | Where-Object { Test-Path $_ } | ForEach-Object { "- $_" } | Out-String)"
          $errorSummary += "`nAPK Files Generated:"
          $errorSummary += "`n$(if (Test-Path "build/app/outputs/flutter-apk") { Get-ChildItem "build/app/outputs/flutter-apk" -Filter "*.apk" | ForEach-Object { "- $($_.Name) ($([math]::Round($_.Length/1MB, 2)) MB)" } | Out-String } else { "- None found" })"
          $errorSummary += "`n"
          $errorSummary | Out-File -FilePath "error_summary.txt" -Encoding UTF8

          Write-Host "‚úÖ Error analysis complete" -ForegroundColor Green
          Write-Host "===========================" -ForegroundColor Green

      - name: üì¶ Package and Upload APK
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: ${{ inputs.app_name }}-debug-apk
          path: |
            build/app/outputs/flutter-apk/*.apk
            error_summary.txt
          retention-days: 30
          if-no-files-found: warn

      - name: üìã Upload Build Logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: build-logs
          path: |
            *.log
            error_summary.txt
          retention-days: 7
          if-no-files-found: warn

      - name: üì± Build Summary Report
        shell: pwsh
        if: always()
        run: |
          Write-Host "=== Final Build Summary ===" -ForegroundColor Green

          $ApkFiles = @()
          if (Test-Path "build/app/outputs/flutter-apk") {
            $ApkFiles = Get-ChildItem -Path "build/app/outputs/flutter-apk" -Filter "*.apk" -Recurse
          }

          $BuildStatus = if ($ApkFiles.Count -gt 0) { "‚úÖ SUCCESS" } else { "‚ùå FAILED" }

          Write-Host "Build Status: $BuildStatus" -ForegroundColor $(if ($ApkFiles.Count -gt 0) { "Green" } else { "Red" })
          Write-Host "App Name: ${{ inputs.app_name }}" -ForegroundColor Yellow
          Write-Host "Build Mode: debug" -ForegroundColor Yellow
          Write-Host "Target Platform: Android API 16+ (4.1+)" -ForegroundColor Yellow
          Write-Host "VM Environment: Windows" -ForegroundColor Yellow
          Write-Host "APK Files Generated: $($ApkFiles.Count)" -ForegroundColor Yellow

          if ($ApkFiles.Count -gt 0) {
            Write-Host "APK Details:" -ForegroundColor Cyan
            foreach ($apk in $ApkFiles) {
              $size = [math]::Round($apk.Length / 1MB, 2)
              Write-Host "  üì± $($apk.Name)" -ForegroundColor White
              Write-Host "     Size: ${size} MB" -ForegroundColor White
              Write-Host "     Path: $($apk.FullName)" -ForegroundColor Gray
            }
          }

          # Add to GitHub Step Summary
          $stepSummary = "## üì± APK Build Summary"
          $stepSummary += "`n"
          $stepSummary += "`n| Property | Value |"
          $stepSummary += "`n|----------|-------|"
          $stepSummary += "`n| üèóÔ∏è Build Status | $BuildStatus |"
          $stepSummary += "`n| üì± App Name | ${{ inputs.app_name }} |"
          $stepSummary += "`n| üîß Build Mode | debug |"
          $stepSummary += "`n| üéØ Target Platform | Android API 16+ (4.1+) |"
          $stepSummary += "`n| üíª VM Environment | Windows |"
          $stepSummary += "`n| üì¶ APK Files | $($ApkFiles.Count) |"
          $stepSummary += "`n"
          $stepSummary += "`n### üìã Generated APK Files"
          $stepSummary += "`n$(if ($ApkFiles.Count -gt 0) { $ApkFiles | ForEach-Object { $size = [math]::Round($_.Length / 1MB, 2); "- **$($_.Name)** - ${size} MB" } | Out-String } else { "No APK files were generated." })"
          $stepSummary += "`n### üìä Build Logs"
          $stepSummary += "`nBuild logs and error analysis have been uploaded as artifacts for detailed review."
          $stepSummary | Out-File -FilePath $env:GITHUB_STEP_SUMMARY -Append -Encoding UTF8

          Write-Host "==============================" -ForegroundColor Green
