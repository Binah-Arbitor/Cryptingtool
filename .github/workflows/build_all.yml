name: Build All Components

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  frontend-android:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
          
      - name: Print versions
        run: |
          flutter --version
          java -version
          
      - name: Cache Flutter pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-
            
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      
      - name: Install Flutter dependencies
        run: flutter pub get
        
      - name: Accept Android SDK licenses
        run: yes | sdkmanager --licenses || true
        
      - name: Build Debug APK
        run: flutter build apk --debug
        
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: build/app/outputs/flutter-apk/app-debug.apk
          
  backend-cpp:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build
          
      - name: Build C++ components
        run: |
          # Check for top-level CMakeLists.txt
          if [ -f "CMakeLists.txt" ]; then
            echo "Found top-level CMakeLists.txt, building..."
            cmake -S . -B build -G Ninja -DCMAKE_BUILD_TYPE=Debug
            cmake --build build -j
          else
            # Look for conventional backend directories
            found_backend=false
            for dir in backend native cpp; do
              if [ -d "$dir" ] && [ -f "$dir/CMakeLists.txt" ]; then
                echo "Found CMakeLists.txt in $dir, building..."
                cmake -S "$dir" -B "build-$dir" -G Ninja -DCMAKE_BUILD_TYPE=Debug
                cmake --build "build-$dir" -j
                found_backend=true
                break
              fi
            done
            
            if [ "$found_backend" = false ]; then
              echo "No CMakeLists.txt found in top-level or conventional directories (backend/, native/, cpp/). Skipping C++ build."
            fi
          fi
          
      - name: Run C++ tests if available
        run: |
          if [ -d "build" ] && command -v ctest >/dev/null 2>&1; then
            ctest --test-dir build || true
          fi
          
      - name: Upload C++ artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cpp-artifacts
          path: |
            build/**/lib/**
            build/**/bin/**
            build-*/**/lib/**
            build-*/**/bin/**
          if-no-files-found: ignore